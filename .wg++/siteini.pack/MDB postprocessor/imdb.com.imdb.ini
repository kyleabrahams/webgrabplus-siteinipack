**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing IMDB data from TvGuide websites
* @MinSWversion: V5.0.1.2
*	-  (postprocess V3.2.1)
* @Site: imdb.com, primary search with imdb
* @Revision 16 - [11/06/2023] Jan van Straaten
*	optomized for postprocess 3.2.1
* @Revision 15 - [08/09/2022] Jan van Straaten
*	- changed country element to location of country_of_origin
*	- changedproducers from new p6
* @Revision 14 - [08/08/2022] Jan van Straaten
*	- remove tags from category
* @Revision 13 - [27/02/2022] Jan van Straaten
*	- add country language to titles 
*	- limit of actors removed 
*	- changed url_primary search with more candidates
* 	- limit of showid set to 10 
* @Revision 12 - [03/02/2022] Jan van Straaten
*   - adds producer
*	- several fixes
* @Revision 11 - [03/01/2021] Jan van Straaten
* 	- rewrite , based on imdb.com.ask rev 13
* @Remarks: none
* @header_end
**------------------------------------------------------------------------------------------------
site {url=imdb.com|mdbinitype=movie|cultureinfo=en-GB|charset=UTF-8|matchfactor=60|searchsite=imdb}
*
scope.range {(primarysearch)|end}
* primary search (using imdb's title search):
*url_primarysearch {url|https://www.imdb.com/find?q=|'title'|&ref_=nv_sr_sm} * old
url_primarysearch {url|https://www.imdb.com/find?q=|'title'|&s=tt&ref_=fn_al_tt_mr}
*https://www.imdb.com/find?q=Scrooge&s=tt&ref_=fn_al_tt_mr
*url_primarysearch.modify {remove()|%28%29}  *in case no productiondate
url_primarysearch.modify {replace()| |+}
url_primarysearch.modify {replace()|'|%27}
url_primarysearch.modify {replace()|:|%3A}
url_primarysearch.modify {replace()|https%3A|https:}
url_primarysearch.modify {replace()|;|%3B}
url_primarysearch.headers {customheader=Accept-Encoding=gzip,deflate}
mdb_show_id.scrub {regex()|primary||/tt(\d{7,8})/||}
mdb_show_id.modify {substring(type=element)|0 10} * first 10

* imdb url's:
url_mdb_p1 {url()|primary|https://www.imdb.com/title/tt|mdb_show_id|/}
url_mdb_p2 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/plotsummary}
url_mdb_p3 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/releaseinfo#akas}
url_mdb_p4 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/reviews}
url_mdb_p5 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/fullcredits#cast}
*https://www.imdb.com/title/tt0067355/companycredits?ref_=tt_dt_co
url_mdb_p6 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/companycredits}
*
url_mdb.headers {customheader=Accept-Encoding=gzip,deflate}

end_scope
*imdb elements
scope.range {(match)|end} 
* musthaves
*mdb_title.scrub {single|p3|<td class="aka-item__name"> (original title)</td>|<td class="aka-item__title">|</td>|</tr>}* original title 
mdb_title.scrub {single(separator=" - " exclude="IMDb" include=first)|p1|<head>|<title>|(|</title>} *needed becaue some have no aka's
* process titles from aka page to include country langauge
mdb_title.scrub {regex()|p3||<td class="aka-item__name">(.+?</td>\s+?<td class="aka-item__title">.+?)</td>||}
mdb_title.modify {cleanup()}
mdb_temp_9.modify {clear}
mdb_temp_9.modify {calculate(format=F0 type=element)|'mdb_title' #}
if {('mdb_temp_9' > "1")|end} * get a title list from the aka pages
loop {(each "mdb_temp_1" in 'mdb_title')|end}
mdb_temp_2.modify {substring(type=regex)|'mdb_temp_1' "(.+?)\s*<td class=\"aka-item__title\">"} * country only
mdb_temp_2.modify {replace|(original title)|original title}
mdb_temp_2.modify {replace|(|- }
mdb_temp_2.modify {remove|)}
mdb_temp_3.modify {remove(type=regex)|'mdb_temp_1' "(.+?<td class=\"aka-item__title\">)"} * title only
mdb_temp_3.modify {addend('mdb_temp_2' not "")| ('mdb_temp_2')} 
mdb_temp_4.modify {addend('mdb_temp_3' not "")|'mdb_temp_3'####}
end_loop
mdb_temp_4.modify {replace()|####|\|}
mdb_title.modify {set()|'mdb_temp_4'}
end_if
*mdb_title.modify {(debug)}
end_scope
scope.range {(getelements)|end}
* actors with role
mdb_actor.scrub {multi(exclude="name=\"producer\"")|p5|<table class="cast_list">|?ref_=ttfc_fc_cl_i||Rest of cast listed alphabetically}
mdb_actor.modify {substring(type=regex regexgroupseparator=" \(role=")|'mdb_actor' "_t\d+\"\s*>(.+?)\s</a>.+?_t\d+\"\s*>(.+?)</a>"}
mdb_actor.modify {cleanup()}
mdb_actor.modify {addend()|)}
mdb_actor.modify {substring(type=element)|0 12}
mdb_director.scrub {multi|p1|"director":|"name": "|"|\},}
mdb_director.scrub {multi|p5|/?ref_=ttfc_fc_dr|"\r> |</a>|</td>} * fulllist
mdb_director.modify {substring(type=element)|0 5} * keep the first 6
* new from series
mdb_producer.scrub {regex()|p7||"Production Companies"(.+?)"total"||}
mdb_producer.modify {substring(type=regex)|'mdb_producer' "\"rowTitle\":\"(.+?)\",\"rowLink\""}
mdb_producer.modify {cleanup()}
**mdb_producer.scrub {regex()|p1||href=\"/company/co\d+?\?ref_=tt_dt_co_\d\">(.+?)</a>||}
*mdb_temp_8.scrub {regex(debug)|p6||>Production Companies</h4>(.+?)</ul>||}
*mdb_producer.modify {substring(type=regex)|'mdb_temp_8' "ttco_co_\d+\"\s>(.+?)</li>"}
*mdb_producer.modify {cleanup()}
mdb_productiondate.scrub {single|p1|<title>||</title>|</title>}
mdb_category.scrub {multi(exclude=role=)|p1|genres&ref_=tt_ov_inf|>|</a>|</a>}
*<span class="ipc-chip__text">.. </span>
mdb_category.modify {remove(type=regex)|"<.+?\">"}
mdb_category.modify {remove(type=regex)|"</.+?>"}
* alternative with tags 
*mdb_category.modify {cleanup(tags="<span class""\">")}
*mdb_category.modify {cleanup(tags="</"">")}
mdb_category.modify {cleanup(removeduplicates)}
mdb_description.scrub {single()|p1|<meta name="description"|content="|"|/><meta} 
mdb_showicon.scrub {single|p1|Poster"|src="|"|"image" />}
mdb_starrating.scrub {regex()|p1||<span class=\"AggregateRatingButton__RatingScore.+?\">(\d\.\d)</span>||}
mdb_starrating.modify {cleanup(removeduplicates)}
mdb_country.scrub {regex()|p1||country_of_origin=.+?&ref_=tt_dt_cn">(.*?)</a>||}
mdb_plot.scrub {single|p2|id="plot-summaries-content">|<p>|</p>|</ul>}
mdb_commentsummary.scrub {multi(max=5 excludeblock="Warning: Spoilers")|p4|class="title" >||</a>|<div class="ipl-expander ">}
mdb_review.scrub {multi(max=1 excludeblock="Warning: Spoilers")|p4|class="title" >|<div class="text show-more__control">|</div>|<div class="actions text-muted">}
mdb_review.modify {cleanup}
end_scope
*