**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing IMDB data from TvGuide websites
* @MinSWversion: V5.0.1.2
*     -  (postprocess V3.2.1)
* @Site: imdb.com, primary search with imdb
* @Revision 16 [11/06/2023] Jan van Straaten
*	- optimised for postprocess 3.2.1
* @Revision 15 [03/01/2023] Jan van Straaten
*	- new element episodeabsolute
*	- fix of the conditions for how the index (temp_1) of episodenumlist , episodetitlelist and episode_id list (temp_6)
*	- correct way how this index is used to get the elelemnts out of these lists
*	- added producers from p7
* @Revision 14 [05/11/2022] Jan van Straaten
*	- limit show_id candidates to 8 
*	- remove tags from plot
* @Revision 13 [24/03/2022] Blackbear199
*	- desc,actor,episode fix
* @Revision 12 [08/03/2022] Jan van Straaten
*	- added title language
* 	- added actor role
* 	- added producer, country
*	- fixed subtitle, starrating, showicon, productiondate, category, description
*	- several other small fixes
* @Revision 11 [21/07/2021] Jan van Straaten
* 	- imdb site changes .. fix of season count mdb_temp_9
* @Revision 10 [26/02/2021] Jan van Straaten
* 	- fix of actors from p4
* @Revision 9 [16/01/2021] Jan van Straaten
*	- reduce max number of seasons to 50
* @Revision 8 [03/01/2021] Jan van Straaten
*	- rewritten , based on imdb.com-ask_series rev 10
* @Remarks: Series data extraction.
* @header_end
**------------------------------------------------------------------------------------------------
*
site {url=imdb.com|mdbinitype=serie|cultureinfo=en-GB|charset=UTF-8|matchfactor=70|searchsite=imdb}
site {episodesystem=onscreen}
scope.range {(primarysearch)|end}
url_primarysearch {url()|https://www.imdb.com/find?q=|'title'|&s=tt&ref_=fn_al_tt_mr}
url_primarysearch.modify {replace()| |%20}
url_primarysearch.modify {replace()|'|%27}
url_primarysearch.modify {replace()|:|%3A}
url_primarysearch.modify {replace()|https%3A|https:}
url_primarysearch.modify {replace()|;|%3B}
url_primarysearch.headers {customheader=Accept-Encoding=gzip,deflate}
mdb_show_id.scrub {regex()|primary||/tt(\d{7,8})/||}
* limit to 8 candidates  .. it apeared very rare that matches are found beyond that
mdb_show_id.modify {cleanup(removeduplicates)}
mdb_show_id.modify {substring(type=element)|0 8}
*
* imdb url's:
url_mdb_p1 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/} * the 'home page to get the season count number
* get the foreign language titles
url_mdb_p2 {url()|primary|https://www.imdb.com/title/tt|mdb_show_id|/releaseinfo#akas}
url_mdb_p3 {url()|primary|https://www.imdb.com/title/tt|mdb_show_id|/episodes?season=|subpage|}
url_mdb_p4 {url()|primary|https://www.imdb.com/title/tt|mdb_episode_id|/} * the episode detail page
*url_mdb_p4.modify {set()|https://www.imdb.com/title/tt'mdb_episode_id'/}
url_mdb_p5 {url|primary|https://www.imdb.com/title/tt|mdb_episode_id|/fullcredits/?ref_=tt_ov_st_sm} *full cast and crew (director, writer, actor)
url_mdb_p6 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/reviews} *user reviews, only from the whole series
url_mdb_p7 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/companycredits}
*
url_mdb.headers {customheader=Accept-Encoding=gzip,deflate}
mdb_temp_9.scrub {regex()|p1||<select id=\"browse-episodes-season\" aria-label=\"(\d+?) seasons\"||} * the subpage count value from the 'last season on p1
subpage_mdb_p3.format {list(count='mdb_temp_9')|1}
end_scope
scope.range {(match)|end}
mdb_episodetitlelist.scrub {multi()|p3|<strong><a href="/title/tt|"name">|</a>|</strong>}
*mdb_episodetitlelist.scrub {regex()|p3||<a href="/title/tt\d+?/\?ref.+?">s\d+?\.E\d+?\s∙\s(.+?)</a>||}
mdb_episodenumlist.scrub {regex(pattern="S'S1', Ep'E1'")|p3||<div>(S\d+?,\sEp\d+?)</div>||}
*mdb_episodenumlist.scrub {regex(pattern="S'S1', Ep'E1'")|p3||<a href="/title/tt\d+?/\?ref.+?">(s\d+?\.E\d+?)\s||}
* process titles from aka page to include country language
mdb_title.scrub {regex()|p2||{"id":"rel_aka_\d+","rowTitle":"(.+?","listContent":\[{"text":".+?)"}]}||}
*mdb_title.modify {(debug)}
mdb_title.modify {cleanup()}
mdb_temp_8.modify {clear}
mdb_temp_8.modify {calculate(format=F0 type=element)|'mdb_title' #}
if {('mdb_temp_8' > "0")|end} * get a title list from the aka pages
loop {(each "mdb_temp_5" in 'mdb_title')|end}
*Belarus","listContent":[{"text":"Ранча|
*Belarus","listContent":[{"text":"Ранча
*India","listContent":[{"text":"Ranczo","subText":"(English)|
mdb_temp_2.modify {substring(type=regex)|'mdb_temp_5' "(.+?)\",\"listContent"} * country only
mdb_temp_2.modify {replace|(original title)|original title}
*mdb_temp_2.modify {replace|(|- }
*mdb_temp_2.modify {remove|)}
mdb_temp_3.modify {substring(type=regex)|'mdb_temp_5' "\"text\":\"(.+)\z"} * title only
mdb_temp_3.modify {replace()|","subText":"| }
mdb_temp_3.modify {addend('mdb_temp_2' not "")| ('mdb_temp_2')}
mdb_temp_4.modify {addend('mdb_temp_3' not "")|'mdb_temp_3'####}
end_loop
mdb_temp_4.modify {replace()|####|\|}
mdb_title.modify {set()|'mdb_temp_4'}
end_if
*  add the one from home page, this is the overall series title
mdb_title.scrub {single(separator=" - " exclude="IMDb" include=first)|p1|<head>|<title>|(|</title>}
* list of all episode id's
mdb_temp_6.scrub {regex|p3||<strong><a href=\"/title/tt(\d+?)/\?ref_=||}
end_scope
*
scope.range {(getelements)|end}
* index of numlist, titlelist and episode_id's
* conditions must include that the value is blank "" before theoperation
* this to ensure it will not be changed later 
mdb_temp_1.modify {calculate(['mdb_episodetitlelist' not ""] ['mdb_subtitle' not ""] & [""] & type=element format=F0)|'mdb_episodetitlelist' 'mdb_subtitle' @}
mdb_temp_1.modify {calculate(['mdb_episodenumlist' not ""] [""] & type=element format=F0)|'mdb_episodenumlist' 'mdb_episode' @}
* get the mdb_episode_id and all other elements that uses mdb_temp_1
if {('mdb_temp_1' not "-1")|end} * also check "" ? 
mdb_episode_id.modify {substring(type=element)|'mdb_temp_6' 'mdb_temp_1' 1}
* also mdb_subtitle and mdb_episode
mdb_subtitle.modify {substring(type=element)|'mdb_episodetitlelist' 'mdb_temp_1' 1}
mdb_episode.modify {substring(type=element)|'mdb_episodenumlist' 'mdb_temp_1' 1}
mdb_episodeabsolute.modify {calculate(format=F0)|'mdb_temp_1' 1 +}
mdb_episodeabsolute.modify {addstart()|E}
end_if
** and the rest 
* 
*mdb_productiondate.scrub {single()|p1|<title>||</title>|</title>}
mdb_productiondate.scrub {regex()|p1||<title>.+?(\d{4}).+?</title>||}
mdb_temp_2.modify {substring(type=regex)|'mdb_episode' "S(\d)"}
mdb_temp_2.modify {calculate(not "")|1 -}
mdb_productiondate.modify {calculate(format=F0)|'mdb_temp_2' +}
mdb_category.scrub {multi(exclude=role=)|p1|genres&ref_=tt_ov_inf|>|</a>|</a>}
mdb_category.modify {remove(type=regex)|"<.+?\">"}
mdb_category.modify {remove(type=regex)|"</.+?>"}
mdb_category.modify {cleanup(removeduplicates)}
* actors with role
*mdb_temp_7.scrub {multi(exclude="name=\"producer\"")|p5|<table class="cast_list">|?ref_=ttfc_fc_cl_i||Rest of cast listed alphabetically}
mdb_actor.scrub {multi(exclude="name=\"producer\"")|p5|<table class="cast_list">|?ref_=ttfc_fc_cl_i||Rest of cast listed alphabetically}
mdb_actor.modify {substring(type=regex regexgroupseparator=" \(role=")|'mdb_actor' "_t\d+\"\s*>(.+?)\s</a>.+?_t\d+\"\s*>(.+?)</a>"}
mdb_actor.modify {cleanup()}
mdb_actor.modify {addend()|)}
*
mdb_director.scrub {regex()|p5||Directed by.+?<a href=.+?>\s*(.+?)\r</a>||}
mdb_producer.scrub {regex()|p7||"Production Companies"(.+?)"total"||}
mdb_producer.modify {substring(type=regex)|'mdb_producer' "\"rowTitle\":\"(.+?)\",\"rowLink\""}
mdb_producer.modify {cleanup()}
* starrateing on p4
mdb_starrating.scrub {regex|p4||\"worstRating\":\d,\"ratingValue\":\s*(\d\.*\d*)}||}
mdb_starratingvotes.scrub {regex()|p4||\"ratingCount\":\s*(\d*),||}
mdb_showicon.scrub {regex()|p4||\"(/title/tt\d+?/mediaviewer/rm\d+?/\?ref_=tt_ov_i)\" aria-label=\"View\s*\{Title\}\s*Poster||}
mdb_showicon.modify {set|https://www.imdb.com'mdb_showicon'}
mdb_commentsummary.scrub {regex()|p6||class=\"title\"\s>\s(.+?)\s+?</a>||}
mdb_commentsummary.modify {substring(type=element)|0 5}
mdb_review.scrub {regex()|p6||^.*?<div class=\"content\">\s+<div class=\"text.*?\">(.+?)<\/div>||}
mdb_review.modify {cleanup}
mdb_country.scrub {regex()|p1||country_of_origin=.+?&ref_=tt_dt_cn">(.*?)</a>||}
mdb_plot.scrub {regex()|p4||plotText\"\:\{\"plainText\"\:\"(.*?)\",||} * was adding "see full summary" + "add a plot"
mdb_plot.modify {cleanup(tags="<"">")}
mdb_description.scrub {single|p4|data-testid="storyline-plot-summary">||</div></div>|</div></div>}
mdb_description.modify {cleanup(tags="<span""</span>")}
mdb_description.modify {cleanup(tags="<"">")}
end_scope